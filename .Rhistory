getwd()
ls
install("modflowDataFuncs")
dev_tools::install("modflowDataFuncs")
library(devtools)
dev_tools::install("modflowDataFuncs")
devtools::install("modflowDataFuncs")
getwd()
setwd('..')
devtools::install("modflowDataFuncs")
setwd('./Modflow')
document()
devtools::install("modflowDataFuncs")
setwd('./R')
devtools::install("modflowDataFuncs")
devtools::install("modflowDataFuncs.R")
setwd('..')
getwd()
setwd('..')
devtools::install("Modflow")
devtools::install("Modflow")
devtools::install("Modflow")
authors_at_r <- paste0(
"'",
person(
"First",
"Last",
email = "first.last@example.com",
role  = c("aut", "cre")),
"'"
)
options(devtools.desc.author=authors)
authors_at_r <- paste0(
"'",
person(
"First",
"Last",
email = "first.last@example.com",
role  = c("aut", "cre")),
"'"
)
options(devtools.desc.author=authors)
authors_at_r <- paste0(
"'",
person(
"First",
"Last",
email = "first.last@example.com",
role  = c("aut", "cre")),
"'"
)
options(devtools.desc.author=authors_at_r)
options(devtools.desc.author="First Last <first.last@example.com> [aut, cre]")
options(devtools.desc.license="GPL-3")
load_all()
options(devtools.desc.author=authors_at_r)
load_all()
library(devtools)
options(devtools.desc.author="First Last <first.last@example.com> [aut, cre]")
options(devtools.desc.license="GPL-3")
load_all()
document()
document()
library(roxygen2)
document()
library(devtools)
document()
document()
library(Modflow)
getwd()
setwd("..")
install("Modflow")
libary(devtools)
library(devtools)
library(roxygen2)
install("Modflow")
document()
getwd()
document(Modflow)
document("Modflow")
install("Modflow")
library(Modflow)
document("Modflow")
install("Modflow")
document("Modflow")
install("Modflow")
document("Modflow")
install("Modflow")
devtools::load_all()
devtools::load_all(Modflow)
devtools::load_all('Modflow')
document("Modflow")
install("Modflow")
document("Modflow")
install("Modflow")
document("Modflow")
install("Modflow")
document("Modflow")
install("Modflow")
document("Modflow")
install("Modflow")
document("Modflow")
install("Modflow")
library(Modflow)
devtools::build_vignettes()
devtools::build_vignettes(Modflow)
devtools::build_vignettes('Modflow')
?defineMFmodel
document("Modflow")
library(Modflow)
install("Modflow")
document("Modflow")
install("Modflow")
?chooseModel
remove.packages(Modflow)
remove.packages('Modflow')
document("Modflow")
install("Modflow")
getwd()
create("Modflow")
getwd()
setwd('..')
library(devtools)
library(roxygen2)
document('Modflow')
install('Modflow')
library(Modflow)
?defineMFmodel
document('Modflow')
install('Modflow')
document('Modflow')
install('Modflow')
library(Modflow)
?chooseBudgetTerms
document('Modflow')
getwd()
setwd('..')
document('Modflow')
library(devtools)
library(roxygen2)
document('Modflow')
install(Modflow)
install('Modflow')
library(Modflow)
library(devtools)
library(roxygen2)
getwd()
setwd('..')
document('Modflow')
install(Modflow)
install('Modflow')
library(Modflow)
?readHeadsbin
?readHeadsbin()
detach("package:Modflow", unload=TRUE)
library("Modflow", lib.loc="~/R/win-library/3.4")
library(devtools)
library(roxygen2)
library(Modflow)
?listBinHeaders
setwd('..')
document('Modflow')
install('Modflow')
library(roxygen2
)
library(devtools)
setwd('..')
document('Modflow')
install('Modflow')
library(devtools)
library(roxygen2)
library(Modflow)
setwd('..')
document('Modflow')
install(Modflow)
install('Modflow')
setwd('..')
library(devtools)
library(roxygen2)
library(Modflow)
install('Modflow')
check('Modflow')
getwd()
.libPaths()
library(Modflow)
install('Modflow')
document('Modflow')
check(Modflow)
check('Modflow')
library(tcltk2)
check('Modflow')
install.packages("tcltk2")
check('Modflow')
libary(devtools)
library(devtools)
getwd()
check('Modflow')
check('Modflow')
install('Modflow')
devtools::load_all("Modflow")
library(Modflow)
library(Modflow)
library(Modflow)
library(Modflow)
library(Modflow)
devtools::use_package("tcltk2")
getwd()
devtools::use_package("tcltk2",type="Imports","Modflow")
library(Modflow)
?Modflow
??Modflow
library(Modflow)
install.packages("Rtools")
library(Modflow)
source_github <- function(u) {
# read script lines from website
script <- getURL(u, ssl.verifypeer = FALSE)
script<-strsplit(script,"\r\n")
# parase lines and evealuate in the global environement
eval(parse(text = unlist(script)),envir=.GlobalEnv)
}
source('Y:/devel/source/R/budgetGraphs/budgetGraphs.R')
list.of.packages
list.of.packages <-c("reshape2","ggplot2","grDevices","rasterVis","maptools","future","listenv","classInt",
"rgdal","rgeos","tcltk2","RCurl","githubinstall")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
#---------------------------------------------------------------------------------------------------
# The order of the following library functions are very important
# due to package:ggplt2 and package:latticeExtra fighting over the 'layer' object
# and package:raster and package:future fighting over the 'value' object
#---------------------------------------------------------------------------------------------------
library(reshape2)
library(ggplot2)
library(grDevices)
library(rasterVis)
library(maptools)
library(future)
library(listenv)
library(classInt)
library(RCurl)
library(githubinstall)
library(Modflow)
installed.packages()
(list.of.packages %in% installed.packages()[,"Package"])
if ("modflow" %in% new.packages) githubunbstall("Modflow")
list.of.packages <-c("reshape2","ggplot2","grDevices","rasterVis","maptools","future","listenv","classInt",
"rgdal","rgeos","tcltk2","RCurl","githubinstall","Modflow")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.packages
list.of.packages
githubunbstall("Modflow")
githubinbstall("Modflow")
githubinstall("Modflow")
githubinstall("KevinRodberg/Modflow")
